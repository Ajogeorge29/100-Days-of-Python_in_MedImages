# -*- coding: utf-8 -*-
"""2/100DaysOfPython_in_MedImag.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WrpNirHjXLHByjbpyvwoAaWOK59qRCoO

Day 2 Project: Image Preprocessing for Medical Images

Topics to Learn Today
##Image Resizing:

Resize images to a consistent size for model input.

##Normalization:

Scale pixel values to a standard range (e.g., 0 to 1).

## Data Augmentation:

Apply transformations like rotation, flipping, and zooming to increase dataset diversity.
"""

!pip install matplotlib numpy torch torchvision

!pip install medmnist

#Load ChestMNIST Dataset
import numpy as np
import matplotlib.pyplot as plt
from medmnist import ChestMNIST

# Load the ChestMNIST dataset
data = ChestMNIST(split='train', download=True)

# Display dataset information
print(f"Dataset shape: {data.imgs.shape}")  # (Number of images, Height, Width)
print(f"Number of classes: {len(data.info['label'])}")
print(f"Class labels: {data.info['label']}")

"""## Resize Images
Resize images to a consistent size (e.g., 64x64) using torchvision.transforms
"""

from torchvision import transforms

# Define a transform to resize images
transform = transforms.Compose([
    transforms.ToPILImage(),  # Convert NumPy array to PIL image
    transforms.Resize((64, 64)),  # Resize to 64x64
    transforms.ToTensor()  # Convert back to tensor
])

# Apply the transform to the first image
sample_image = data.imgs[0]
resized_image = transform(sample_image)

# Display the original and resized images
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(sample_image, cmap='gray')
plt.title("Original Image")
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(resized_image.permute(1, 2, 0), cmap='gray')
plt.title("Resized Image (64x64)")
plt.axis('off')

plt.show()

"""## Normalize Images
Normalize pixel values to a range of 0 to 1.
"""

# Normalize the resized images
normalized_image = resized_image /255.0

#Display the normalized Images

plt.imshow(normalized_image.permute(1,2,0), cmap='gray')
plt.title("Normalized Image")
plt.axis('off')
plt.show()

"""## Data Augmentation
Apply transformations like rotation, flipping, and zooming to increase dataset diversity.
"""

# Define a transform for data augmentation
augmentation_transform = transforms.Compose([
    transforms.ToPILImage(),
    transforms.RandomHorizontalFlip(p=0.5),  # Flip horizontally with 50% probability
    transforms.RandomRotation(degrees=10),  # Rotate by up to 10 degrees
    transforms.ToTensor()
])

# Apply augmentation to the first image
augmented_image = augmentation_transform(sample_image)

# Display the augmented image
plt.imshow(augmented_image.permute(1, 2, 0), cmap='gray')
plt.title("Augmented Image")
plt.axis('off')
plt.show()

"""## Save Preprocessed Images"""

from PIL import Image

# Save the resized image
resized_image_pil = transforms.ToPILImage()(resized_image)
resized_image_pil.save("resized_chest_xray.png")

# Save the augmented image
augmented_image_pil = transforms.ToPILImage()(augmented_image)
augmented_image_pil.save("augmented_chest_xray.png")

print("Preprocessed images saved!")

"""##What’s Next?
Tomorrow, we’ll dive into building a simple CNN model for classifying chest X-rays using the preprocessed data.

Keep practicing today’s code and explore other preprocessing techniques (e.g., contrast adjustment, noise reduction).
"""

